{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit'; // create an auth slice to maintain the user signin status\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    // user is not logged in\n    status: false\n  },\n  reducers: {\n    signin: (state, action) => {\n      // the user is now signed in\n      state.status = true; // localStorage\n      // - built-in javascript object\n      // - used to store something (key-value pairs)\n      // - will NOT be cleared untill the keys get removed explicitly\n      // sessionStorage\n      // - built-in javascript object\n      // - used to store something (key-value pairs)\n      // - will be cleared automatically after the session gets killed\n      // get the token from response and save it in sessionStorage\n      // const token = result.data.token\n      //sessionStorage['token'] = action.payload['token']\n      //sessionStorage['username'] = action.payload['name']\n    },\n    signout: (state, action) => {\n      // the user is signed out\n      state.status = false; // remove the user token and name from sessionStorage\n\n      sessionStorage.removeItem('token');\n      sessionStorage.removeItem('username');\n    }\n  }\n}); // export the reducer for authSlice\n\nexport default authSlice.reducer; // export the actions\n\nexport const {\n  signin,\n  signout\n} = authSlice.actions;","map":{"version":3,"names":["createSlice","authSlice","name","initialState","status","reducers","signin","state","action","signout","sessionStorage","removeItem","reducer","actions"],"sources":["E:/Amisha/Parkify_frontend new/Parkify_frontend/src/slices/authSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\n// create an auth slice to maintain the user signin status\r\nconst authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState: {\r\n    // user is not logged in\r\n    status: false,\r\n  },\r\n  reducers: {\r\n    signin: (state, action) => {\r\n      // the user is now signed in\r\n      state.status = true\r\n\r\n      // localStorage\r\n      // - built-in javascript object\r\n      // - used to store something (key-value pairs)\r\n      // - will NOT be cleared untill the keys get removed explicitly\r\n\r\n      // sessionStorage\r\n      // - built-in javascript object\r\n      // - used to store something (key-value pairs)\r\n      // - will be cleared automatically after the session gets killed\r\n\r\n      // get the token from response and save it in sessionStorage\r\n      // const token = result.data.token\r\n      //sessionStorage['token'] = action.payload['token']\r\n      //sessionStorage['username'] = action.payload['name']\r\n    },\r\n    signout: (state, action) => {\r\n      // the user is signed out\r\n      state.status = false\r\n\r\n      // remove the user token and name from sessionStorage\r\n      sessionStorage.removeItem('token')\r\n      sessionStorage.removeItem('username')\r\n    },\r\n  },\r\n})\r\n\r\n// export the reducer for authSlice\r\nexport default authSlice.reducer\r\n\r\n// export the actions\r\nexport const { signin, signout } = authSlice.actions\r\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B,C,CAEA;;AACA,MAAMC,SAAS,GAAGD,WAAW,CAAC;EAC5BE,IAAI,EAAE,MADsB;EAE5BC,YAAY,EAAE;IACZ;IACAC,MAAM,EAAE;EAFI,CAFc;EAM5BC,QAAQ,EAAE;IACRC,MAAM,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MACzB;MACAD,KAAK,CAACH,MAAN,GAAe,IAAf,CAFyB,CAIzB;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;IACD,CAnBO;IAoBRK,OAAO,EAAE,CAACF,KAAD,EAAQC,MAAR,KAAmB;MAC1B;MACAD,KAAK,CAACH,MAAN,GAAe,KAAf,CAF0B,CAI1B;;MACAM,cAAc,CAACC,UAAf,CAA0B,OAA1B;MACAD,cAAc,CAACC,UAAf,CAA0B,UAA1B;IACD;EA3BO;AANkB,CAAD,CAA7B,C,CAqCA;;AACA,eAAeV,SAAS,CAACW,OAAzB,C,CAEA;;AACA,OAAO,MAAM;EAAEN,MAAF;EAAUG;AAAV,IAAsBR,SAAS,CAACY,OAAtC"},"metadata":{},"sourceType":"module"}